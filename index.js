const token = sessionStorage.getItem("token");
const API_URL = "https://api.webopsagency.com";

if (!token) {
  location.replace("/login.html");
} else {
  axios.defaults.headers.common["Authorization"] = `Bearer ${token}`;

  // Ph·∫ßn t·ª≠ DOM
  const showMaxPlay = document.getElementById("maxPlay");
  const lixiImage = document.getElementById("lixiImage");
  const notification = document.getElementById("notification");

  async function getLixi() {
    try {
      const {
        data: { data: awardList },
      } = await axios.get(`${API_URL}/awards-list`);
      const totalMoney = awardList.reduce((sum, item) => {
        return sum + item.luckyMoneyId?.value || 0;
      }, 0);
      showMaxPlay.textContent = `B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ${totalMoney} VNƒê`;
    } catch (error) {
      console.log(error);
    }
  }
  getLixi();
  // H√†m hi·ªÉn th·ªã l√¨ x√¨ ng·∫´u nhi√™n
  async function showLixi() {
    try {
      const { data } = await axios.post(`${API_URL}/genawards`);
      const message = data?.message || "Ch√∫c m·ª´ng nƒÉm m·ªõi";
      // Hi·ªÉn th·ªã th√¥ng b√°o
      notification.textContent = `üéâ ${message}`;
      notification.classList.add("show");
      // ·∫®n th√¥ng b√°o sau 3 gi√¢y
      setTimeout(() => {
        notification.classList.remove("show");
      }, 2000);
      getLixi();
      // Th√™m hi·ªáu ·ª©ng rung
      lixiImage.classList.add("shake");
      setTimeout(() => lixiImage.classList.remove("shake"), 1000);
    } catch (error) {
      alert("B·∫°n ƒë√£ h·∫øt l∆∞·ª£t ch∆°i");
      console.log(error);
    }
  }

  // Th√™m s·ª± ki·ªán click v√†o bao l√¨ x√¨
  lixiImage.addEventListener("click", showLixi);

  // Kh·ªüi t·∫°o Shake.js
  const shakeEvent = new Shake({
    threshold: 15, // ƒê·ªô nh·∫°y c·ªßa l·∫Øc
    timeout: 1000, // Th·ªùi gian gi·ªØa c√°c l·∫ßn l·∫Øc
  });

  // L·∫Øng nghe s·ª± ki·ªán l·∫Øc
  shakeEvent.start();

  window.addEventListener(
    "shake",
    function () {
      showLixi();
    },
    false
  );

  // ƒê·∫£m b·∫£o d·ª´ng l·∫Øng nghe khi kh√¥ng c·∫ßn thi·∫øt
  window.addEventListener("beforeunload", function () {
    shakeEvent.stop();
  });
}
// H√†m reset l√¨ x√¨
async function resetLixi() {
  try {
    await axios.get(`${API_URL}/awards-delete`);
  } catch (error) {
    console.log(error);
  }
}
