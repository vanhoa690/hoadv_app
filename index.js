const userId = localStorage.getItem("userId");
if (!userId) {
  location.replace("/login.html");
}
const lixiValues = ["lixi_0", "lixi_10", "lixi_20", "lixi_50"];
// Danh s√°ch l√¨ x√¨ v√† t·ª∑ l·ªá xu·∫•t hi·ªán t∆∞∆°ng ·ª©ng (ph·∫ßn trƒÉm)
const lixiList = [
  { value: "B·∫°n nh·∫≠n ƒë∆∞·ª£c 10,000 VNƒê! üéÅ", percentage: 30 }, // 40%
  { value: "Ch√∫c m·ª´ng! B·∫°n nh·∫≠n ƒë∆∞·ª£c 20,000 VNƒê! üéâ", percentage: 10 }, // 30%
  { value: "Wow! B·∫°n nh·∫≠n ƒë∆∞·ª£c 50,000 VNƒê! üßß", percentage: 8 }, // 20%
  { value: "B·∫°n nh·∫≠n ƒë∆∞·ª£c 100,000 VNƒê! ü§ë", percentage: 2 }, // 5%
  {
    value: "Ch√∫c m·ª´ng nƒÉm m·ªõi! B·∫°n nh·∫≠n ƒë∆∞·ª£c 1,000,000 VNƒê! ü•≥",
    percentage: 0,
  }, // 4%
  { value: "Ch√∫c m·ª´ng nƒÉm m·ªõi, th·ª≠ l·∫°i l·∫ßn sau nh√©! üòÖ", percentage: 50 }, // 1%
];

// T·∫°o m·∫£ng t·ª∑ l·ªá d·ª±a tr√™n danh s√°ch lixiList
function createWeightedArray(list) {
  const weightedArray = [];
  list.forEach((item) => {
    for (let i = 0; i < item.percentage; i++) {
      weightedArray.push(item.value);
    }
  });
  return weightedArray;
}

// M·∫£ng t·ª∑ l·ªá ƒë√£ ƒë∆∞·ª£c t·∫°o
const weightedLixiArray = createWeightedArray(lixiList);

// H√†m random theo t·ª∑ l·ªá
function getRandomLixi() {
  const randomIndex = Math.floor(Math.random() * weightedLixiArray.length);
  return weightedLixiArray[randomIndex];
}

// Ph·∫ßn t·ª≠ DOM
const lixiImage = document.getElementById("lixiImage");
const notification = document.getElementById("notification");

async function saveLixi(lixi) {
  const data = {
    userId,
    lixi,
  };
  try {
    await axios.post("http://localhost:3000/products", data);
    // alert("lixi thanh cong");
  } catch (error) {
    alert("error");
  }
}

// H√†m hi·ªÉn th·ªã l√¨ x√¨ ng·∫´u nhi√™n
function showLixi() {
  const message = getRandomLixi();
  // const randomIndex = Math.floor(Math.random() * lixiList.length);
  // const randomLixi = Math.floor(Math.random() * lixiValues.length);
  // const message = lixiList[randomIndex];

  // Hi·ªÉn th·ªã th√¥ng b√°o
  notification.textContent = `üéâ ${message}`;
  notification.classList.add("show");
  // ·∫®n th√¥ng b√°o sau 3 gi√¢y
  setTimeout(() => {
    notification.classList.remove("show");
  }, 1000);
  // saveLixi(lixiValues[randomLixi]);
  // Th√™m hi·ªáu ·ª©ng rung
  lixiImage.classList.add("shake");
  setTimeout(() => lixiImage.classList.remove("shake"), 1000);
}

// H√†m reset l√¨ x√¨
function resetLixi() {
  notification.textContent = "";
  notification.classList.remove("show");
}

// Th√™m s·ª± ki·ªán click v√†o bao l√¨ x√¨
lixiImage.addEventListener("click", showLixi);

// Kh·ªüi t·∫°o Shake.js
const shakeEvent = new Shake({
  threshold: 15, // ƒê·ªô nh·∫°y c·ªßa l·∫Øc
  timeout: 1000, // Th·ªùi gian gi·ªØa c√°c l·∫ßn l·∫Øc
});

// L·∫Øng nghe s·ª± ki·ªán l·∫Øc
shakeEvent.start();

window.addEventListener(
  "shake",
  function () {
    showLixi();
  },
  false
);

// ƒê·∫£m b·∫£o d·ª´ng l·∫Øng nghe khi kh√¥ng c·∫ßn thi·∫øt
window.addEventListener("beforeunload", function () {
  shakeEvent.stop();
});

function renderProductRow(product, index) {
  return `
     <tr>
        <th scope="row">${`L·∫ßn L·∫Øc ${index + 1}`}</th>
                <td>${product.userId}</td>
                <td>${product.lixi} VND</td>
        </tr>
    `;
}

async function showProductList() {
  const res = await axios.get(
    `http://localhost:3000/products?userId=${userId}`
  );
  const products = res.data;
  document.getElementById("list").innerHTML = `
        <table class="table">
          <thead>
            <tr>
              <th scope="col">L·∫Øc</th>
              <th scope="col">User Id</th>
              <th scope="col">Li xi</th>
            </tr>
          </thead>
          <tbody>
          ${products
            .map((product, index) => renderProductRow(product, index))
            .join("")}
          </tbody>
        </table>
         `;
}

showProductList();
